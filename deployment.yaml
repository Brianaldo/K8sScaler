kind: Namespace
apiVersion: v1
metadata:
  name: k8s-scaler
  labels:
    name: k8s-scaler

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8s-scaler-sa
  namespace: k8s-scaler

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: deployment-manager
  namespace: k8s-scaler
rules:
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: deployment-manager-binding
  namespace: k8s-scaler
subjects:
  - kind: ServiceAccount
    name: k8s-scaler-sa
    namespace: k8s-scaler
roleRef:
  kind: Role
  name: deployment-manager
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: deployment-manager-default
  namespace: default
rules:
  - apiGroups: ["apps"]
    resources: ["deployments", "deployments/scale"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: deployment-manager-binding-default
  namespace: default
subjects:
  - kind: ServiceAccount
    name: k8s-scaler-sa
    namespace: k8s-scaler
roleRef:
  kind: Role
  name: deployment-manager-default
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: k8s-scaler-config
  namespace: k8s-scaler
data:
  config.yaml: |
    modules:
      controller:
        cooling_down_duration: 60
        max_target_pod: 20
        services:
          s0: 250
          s1: 150
          s2: 100
          s3: 100
          s4: 100
          s5: 100
          s6: 100
        test:
          is_test: true
          data_path: "data/traffic.csv"
          starting_index: 4320

      latency_predictor_model:
        model_path: "models/latency_predictor_model/v1"
        num_target: 7

      metrics_fetcher:
        prometheus_url: "http://prometheus-nodeport.monitoring.svc.cluster.local:9090"

      resource_manager:

      traffic_forecaster_model:
        model_path: "models/traffic_forecaster_model/v1"

    exporter:
      port: 8080

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-scaler
  namespace: k8s-scaler
spec:
  replicas: 1
  selector:
    matchLabels:
      app: k8s-scaler
  template:
    metadata:
      labels:
        app: k8s-scaler
        prometheus.io/scrape: "true"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    spec:
      serviceAccountName: k8s-scaler-sa
      containers:
        - name: k8s-scaler
          image: brianaldo/k8s-scaler:latest
          imagePullPolicy: Never
          tty: true
          ports:
            - name: http-scalerport
              containerPort: 8080
          volumeMounts:
            - name: k8s-scaler-config-volume
              mountPath: /app/config.yaml
              subPath: config.yaml
      volumes:
        - name: k8s-scaler-config-volume
          configMap:
            name: k8s-scaler-config

---
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: k8s-scaler-monitor
  namespace: k8s-scaler
  labels:
    release: prometheus
spec:
  selector:
    matchLabels:
      prometheus.io/scrape: "true"
  podMetricsEndpoints:
    - port: "http-scalerport"
      path: "/metrics"
